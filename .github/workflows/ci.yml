name: CI

on:
  push:
  pull_request:

jobs:
  checks:
    name: checks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10']
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setting Python and OS environment variables on Linux and Mac
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        run: |
          echo "PYTHON=${{ matrix.python-version }}" >> $GITHUB_ENV
          echo "OS=${{ runner.os }}" >> $GITHUB_ENV
      
      - name: Setting Python and OS environment variables on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "PYTHON=${{ matrix.python-version }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "OS=${{ runner.os }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/dev_requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --upgrade-strategy eager -r requirements.txt -r dev_requirements.txt

      - name: isort
        run: isort --check-only pymusas_models model_function_tests model_creation_tests
      
      - name: flake8
        run: flake8

      - name: Cache mypy
        uses: actions/cache@v2
        with:
          path: ./.mypy_cache
          key: ${{ runner.os }}-${{ env.pythonLocation }}

      - name: mypy
        run: mypy

      - name: tests on Linux and Mac
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        run: |
          make model-creation-tests
          ls -al
          ls -al ./temp_venv
          ls -al ./temp_venv/.env
          ls -al ./temp_venv/.env/bin
          make model-function-tests

      - name: tests on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          pytest --virtual-env-directory=.\temp_venv --overwrite .\model_creation_tests
          dir .
          dir .\temp_venv
          dir .\temp_venv\.env
          dir .\temp_venv\.env\bin
          .\temp_venv\.env\bin\activate.ps1
          pytest .\model_function_tests
          deactivate